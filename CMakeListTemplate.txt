cmake_minimum_required(VERSION 3.15)

##############################################
# 项目核心配置（根据实际项目修改以下变量）
##############################################
# 项目名称（生成的sln/库/可执行文件名称）
set(PROJECT_NAME "MyProject")

# 项目类型：EXECUTABLE（可执行程序）或 SHARED（动态库）或 STATIC（静态库）
set(PROJECT_TYPE "EXECUTABLE")

# C++标准版本
set(CXX_STANDARD 17)

# 源文件列表（支持通配符或具体文件）
set(SOURCE_FILES
    src/main.cpp
    src/utils.cpp
    src/module/*.cpp  # 匹配目录下所有cpp文件
)

# 头文件列表（可选，主要用于IDE显示）
set(HEADER_FILES
    include/utils.h
    include/module/*.h
)

# 头文件搜索目录（相当于VS的附加包含目录）
set(INCLUDE_DIRS
    include
    thirdparty/include
)

# 外部库搜索目录（相当于VS的附加库目录）
set(LIBRARY_DIRS
    lib
    thirdparty/lib
)

# 依赖的库名称（不带后缀，如"opencv_core"或"Qt5Widgets"）
set(LINK_LIBRARIES
    # 示例：
    # opengl32
    # Qt5::Core
    # ${OpenCV_LIBS}
)

# 预定义宏（相当于VS的预处理器定义）
set(DEFINITIONS
    # 示例：
    # DEBUG
    # ENABLE_LOG=1
)

##############################################
# 构建逻辑（以下内容通常无需修改）
##############################################
# 项目初始化
project(${PROJECT_NAME} LANGUAGES CXX)

# 设置C++标准
set(CMAKE_CXX_STANDARD ${CXX_STANDARD})
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 添加头文件目录
include_directories(${INCLUDE_DIRS})

# 添加库搜索目录
link_directories(${LIBRARY_DIRS})

# 添加预定义宏
add_definitions(${DEFINITIONS})

# 创建目标
if(PROJECT_TYPE STREQUAL "EXECUTABLE")
    add_executable(${PROJECT_NAME}
        ${SOURCE_FILES}
        ${HEADER_FILES}  # 头文件仅用于IDE显示
    )
elseif(PROJECT_TYPE STREQUAL "SHARED")
    add_library(${PROJECT_NAME} SHARED
        ${SOURCE_FILES}
        ${HEADER_FILES}
    )
elseif(PROJECT_TYPE STREQUAL "STATIC")
    add_library(${PROJECT_NAME} STATIC
        ${SOURCE_FILES}
        ${HEADER_FILES}
    )
else()
    message(FATAL_ERROR "不支持的项目类型：${PROJECT_TYPE}，请使用EXECUTABLE/SHARED/STATIC")
endif()

# 链接外部库
target_link_libraries(${PROJECT_NAME} ${LINK_LIBRARIES})

# 设置输出目录
set(OUTPUT_DIR ${CMAKE_BINARY_DIR}/output)
set_target_properties(${PROJECT_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR}/bin  # 可执行文件/动态库
    ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR}/lib  # 静态库
    LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIR}/lib  # 动态库（Linux）
)

# 自动创建输出目录
file(MAKE_DIRECTORY ${OUTPUT_DIR}/bin)
file(MAKE_DIRECTORY ${OUTPUT_DIR}/lib)
